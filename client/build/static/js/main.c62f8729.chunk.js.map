{"version":3,"sources":["actions.js","components/HistoryList.js","components/AddForm.js","components/App.js","reducers.js","index.js"],"names":["receiveDataSuccess","historyArray","type","HistoryList","store","getState","histores","isFetching","map","history","key","response_timestamp","user_input","bot_response","AddForm","form","onSubmit","e","preventDefault","axios","post","then","response","data","sort","a","b","dispatch","catch","err","console","error","Error","handleSubmit","value","onChange","changeUserInput","target","App","this","props","Component","initialState","rootReducer","combineReducers","state","action","createStore","render","ReactDOM","document","getElementById","subscribe"],"mappings":"wOAgBaA,EAAqB,SAAAC,GAAY,MAAK,CACjDC,KAdkC,uBAelCD,iBC2BaE,EAzCK,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAAY,EACIA,EAAMC,WAAWC,SAA9CC,EADyB,EACzBA,WAAYN,EADa,EACbA,aAmBpB,OACE,6BAEIM,EACI,8CACA,6BACE,4BACGN,EAAaO,KAAI,SAAAC,GAAO,OACvB,wBAAIC,IAAKD,EAAQE,oBAAjB,UACMF,EAAQE,mBADd,gBACwCF,EAAQG,WADhD,KAEE,6BAFF,UAGMH,EAAQE,mBAHd,gBAGwCF,EAAQI,sBCGnDC,EAjCC,SAAC,GAAe,IAAbV,EAAY,EAAZA,MACVQ,EAAcR,EAAMC,WAAWU,KAA/BH,WAsBP,OACE,6BACE,0BAAMI,SAAU,SAAAC,GAAC,OAtBA,SAAAA,GACpBA,EAAEC,iBAEFC,IAAMC,KAAK,QAAS,CAAER,eACpBS,MAAK,SAAAC,GAEJ,IAAIC,EAAOD,EAASC,KAAKC,MAAK,SAASC,EAAEC,GACvC,OAAQD,EAAEd,mBAAqBe,EAAEf,mBAAqB,GAAK,KAG7DP,EAAMuB,SFRyB,CACnCzB,KAV6B,oBEkBzB,IAAMD,EAAesB,EACrBnB,EAAMuB,SAAS3B,EAAmBC,OAEnC2B,OAAM,SAAAC,GACLC,QAAQC,MAAM,IAAIC,MAAMH,IACxBzB,EAAMuB,SFJ4B,CACtCzB,KAjBkC,2BE0BT+B,CAAahB,KAC9B,2BAAOiB,MAAOtB,EAAYuB,SAAU,SAAAlB,GAAC,OAAIb,EAAMuB,SFzB1B,SAAAf,GAAU,MAAK,CAC5CV,KAPoC,oBAQpCU,cEuBgEwB,CAAgBnB,EAAEoB,OAAOH,WACnF,4BAAQhC,KAAK,UAAb,mBCjBOoC,E,uKATX,OACE,6BACE,kBAAC,EAAD,CAAUlC,MAAOmC,KAAKC,MAAMpC,QAC5B,kBAAC,EAAD,CAAcA,MAAOmC,KAAKC,MAAMpC,a,GALtBqC,a,OCDZC,EAAe,CACnB3B,KAAM,CACJH,WAAY,IAEdN,SAAU,CACRC,YAAY,EACZN,aAAc,KA8CH0C,EALKC,YAAgB,CAClC7B,KAtCkB,WAAwC,IAAvC8B,EAAsC,uDAA9BH,EAAa3B,KAAM+B,EAAW,uCACzD,OAAQA,EAAO5C,MACb,IJfkC,oBIgBhC,OAAO,2BACF2C,GADL,IAEEjC,WAAYkC,EAAOlC,aAEvB,IJnB2B,kBIoBzB,OAAO8B,EAAa3B,KACtB,QACE,OAAO8B,IA6BXvC,SAzBsB,WAA4C,IAA3CuC,EAA0C,uDAAlCH,EAAapC,SAAUwC,EAAW,uCAChE,OAAQA,EAAO5C,MACb,IJ3B+B,eI4B9B,OAAO,2BACF2C,GADL,IAEEtC,YAAY,IAEhB,IJ/BgC,uBIgC9B,OAAO,2BACFsC,GADL,IAEEtC,YAAY,EACZN,aAAc6C,EAAO7C,eAEzB,IJpCgC,sBIqC9B,OAAO,2BACF4C,GADL,IAEEtC,YAAY,IAEhB,QACG,OAAOsC,MCxCRzC,EAAQ2C,YAAYJ,GAEpBK,EAAS,WACbC,IAASD,OACP,kBAAC,EAAD,CAAK5C,MAAOA,IACZ8C,SAASC,eAAe,UAI5B/C,EAAMgD,WAAU,WACdJ,OAEFA,M","file":"static/js/main.c62f8729.chunk.js","sourcesContent":["export const CHANGE_USER_INPUT      = 'CHANGE_USER_INPUT'\r\nexport const INITIALIZE_FORM = 'INITIALIZE_FORM'\r\nexport const REQUEST_DATA         = 'REQUEST_DATA'\r\nexport const RECEIVE_DATA_SUCCESS = 'RECEIVE_DATA_SUCCESS'\r\nexport const RECEIVE_DATA_FAILED  = 'RECEIVE_DATA_FAILED'\r\n\r\nexport const changeUserInput = user_input => ({\r\n  type: CHANGE_USER_INPUT,\r\n  user_input,\r\n})\r\nexport const initializeForm = () => ({\r\n  type: INITIALIZE_FORM,\r\n})\r\nexport const requestData = () => ({\r\n  type: REQUEST_DATA,\r\n})\r\nexport const receiveDataSuccess = historyArray => ({\r\n  type: RECEIVE_DATA_SUCCESS,\r\n  historyArray,\r\n})\r\nexport const receiveDataFailed = () => ({\r\n  type: RECEIVE_DATA_FAILED,\r\n})\r\n","import React from 'react'\r\nimport axios from 'axios'\r\nimport { requestData, receiveDataSuccess, receiveDataFailed } from '../actions'\r\n\r\nconst HistoryList = ({ store }) => {\r\n  const { isFetching, historyArray } = store.getState().histores\r\n\r\n  const handleFetchData = () => {\r\n   store.dispatch(requestData())\r\n    axios.get('/history/list')\r\n    .then(response => {  // データ受け取りに成功した場合\r\n      var data = response.data.sort(function(a,b) {\r\n        return (a.response_timestamp > b.response_timestamp ? 1 : -1);\r\n      }); //表示用にタイムスタンプ昇順で並べる\r\n\r\n      const _historyArray = data;\r\n      store.dispatch(receiveDataSuccess(_historyArray))    // データをstoreに保存するとともにisFetchingをfalse\r\n    })\r\n    .catch(err => {  // データ受け取りに失敗した場合\r\n      console.error(new Error(err))\r\n      store.dispatch(receiveDataFailed())  // isFetchingをfalse\r\n    })\r\n  }\r\n\r\n  return (\r\n    <div>\r\n    {\r\n        isFetching  // isFetchingの値で分岐\r\n          ? <h2>Now Loading...</h2>  // データをFetch中ならばローディング表示\r\n          : <div>\r\n              <ul>\r\n                {historyArray.map(history => (\r\n                  <li key={history.response_timestamp}>\r\n                    {`${history.response_timestamp} YOU>${history.user_input} `}\r\n                    <br />\r\n                    {`${history.response_timestamp} BOT>${history.bot_response}`}\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n            </div>\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default HistoryList\r\n","import React from 'react'\r\nimport axios from 'axios'\r\nimport { changeUserInput,initializeForm,requestData, receiveDataSuccess, receiveDataFailed} from '../actions'\r\nimport HistoryList from './HistoryList'\r\n\r\nconst AddForm = ({ store }) => {\r\n  const {user_input} = store.getState().form  // storeからフォームの内容を取得\r\n\r\n  const handleSubmit = e => {\r\n   e.preventDefault()\r\n\r\n   axios.post('/chat', { user_input})  // 入力文字列をサーバーにPOST\r\n    .then(response => {\r\n\r\n      var data = response.data.sort(function(a,b) {\r\n        return (a.response_timestamp > b.response_timestamp ? 1 : -1);\r\n      }); //表示用にタイムスタンプ昇順で並べる\r\n\r\n      store.dispatch(initializeForm())  // submit後はフォームを初期化\r\n      const historyArray = data\r\n      store.dispatch(receiveDataSuccess(historyArray))\r\n    })\r\n    .catch(err => {\r\n      console.error(new Error(err))\r\n      store.dispatch(receiveDataFailed())\r\n    })\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={e => handleSubmit(e)}>\r\n          <input value={user_input} onChange={e => store.dispatch(changeUserInput(e.target.value))} />\r\n        <button type=\"submit\">送信</button>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AddForm\r\n","import React, { Component } from 'react';\nimport AddForm from './AddForm'\nimport HistoryList from './HistoryList'\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <AddForm  store={this.props.store} />\n        <HistoryList  store={this.props.store} />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","import { combineReducers } from 'redux'\r\nimport { CHANGE_USER_INPUT, INITIALIZE_FORM,REQUEST_DATA, RECEIVE_DATA_SUCCESS, RECEIVE_DATA_FAILED  } from './actions'\r\n\r\nconst initialState = {\r\n  form: {\r\n    user_input: '', // 入力文字列\r\n  },\r\n  histores: {\r\n    isFetching: false,  // サーバーからリストを取ってきている最中かどうか\r\n    historyArray: [],  // 履歴データを入れる配列\r\n  },\r\n}\r\n\r\nconst formReducer = (state = initialState.form, action) => {\r\n  switch (action.type) {\r\n    case CHANGE_USER_INPUT:\r\n      return {\r\n        ...state,\r\n        user_input: action.user_input,\r\n      }\r\n    case INITIALIZE_FORM:\r\n      return initialState.form\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nconst historesReducer = (state = initialState.histores, action) => {\r\n   switch (action.type) {\r\n     case REQUEST_DATA:\r\n      return {\r\n        ...state,\r\n        isFetching: true,\r\n      }\r\n    case RECEIVE_DATA_SUCCESS:\r\n      return {\r\n        ...state,\r\n        isFetching: false,\r\n        historyArray: action.historyArray,\r\n      }\r\n    case RECEIVE_DATA_FAILED:\r\n      return {\r\n        ...state,\r\n        isFetching: false,\r\n      }\r\n    default:\r\n       return state\r\n   }\r\n }\r\n\r\nconst rootReducer = combineReducers({\r\n  form: formReducer,\r\n  histores: historesReducer,\r\n})\r\n\r\nexport default rootReducer\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { createStore } from 'redux'\nimport App from './components/App'\nimport rootReducer from './reducers'\n\nconst store = createStore(rootReducer)\n\nconst render = () => {\n  ReactDOM.render(\n    <App store={store} />,\n    document.getElementById('root')\n  )\n}\n\nstore.subscribe(() => {\n  render()\n})\nrender()\n"],"sourceRoot":""}